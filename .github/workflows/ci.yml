name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1


      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}

          envs: MYSQL_HOST,MYSQL_PORT,MYSQL_USER,MYSQL_PASSWORD,MYSQL_DATABASE
          script: |
            # Navigate to home directory
            cd /home/ec2-user

            # Gracefully stop the existing container
            if sudo docker ps -q -f name=brave_lumiere; then
              echo "Stopping existing container..."
              sudo docker stop brave_lumiere
              sudo docker rm brave_lumiere
            fi

            # Clean up unused images to free space
            sudo docker system prune -f

            # Remove old project directory
            sudo rm -rf f4

            # Clone the latest code
            git clone https://github.com/yuthkota/F4.git f4
            cd f4

            # Create .env file
            cat > .env << EOF
            MYSQL_HOST=${MYSQL_HOST}
            MYSQL_PORT=${MYSQL_PORT}
            MYSQL_USER=${MYSQL_USER}
            MYSQL_PASSWORD=${MYSQL_PASSWORD}
            MYSQL_DATABASE=${MYSQL_DATABASE}
            EOF

            # Build new image
            echo "Building Docker image..."
            sudo docker build -t f4:latest . || exit 1

            # Run new container
            echo "Starting new container..."
            sudo docker run -d \
              --name brave_lumiere \
              --restart unless-stopped \
              -p 80:3000 \
              --env-file .env \
              f4:latest

            # Verify container is running
            if ! sudo docker ps -q -f name=sad_shaw; then
              echo "Container failed to start!"
              sudo docker logs sad_shaw
              exit 1
            fi

            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 10

            # Test application
            if curl -f http://localhost:80 >/dev/null 2>&1; then
              echo "Application is running successfully!"
            else
              echo "Application failed to start properly"
              sudo docker logs sad_shaw
              exit 1
            fi

            # Test MySQL connection using node
            echo "Testing MySQL connection..."
            sudo docker exec sad_shaw sh -c 'node -e "const mysql=require(\'mysql2\');const conn=mysql.createConnection({host:process.env.MYSQL_HOST,port:process.env.MYSQL_PORT,user:process.env.MYSQL_USER,password:process.env.MYSQL_PASSWORD,database:process.env.MYSQL_DATABASE});conn.connect((err)=>{if(err){console.error(err);process.exit(1)}else{console.log(\'MySQL connection successful\');process.exit(0)}})"' || {
              echo "MySQL connection failed!"
              exit 1
            }
